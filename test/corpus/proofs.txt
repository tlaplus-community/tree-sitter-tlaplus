===============================|||
Proof Step ID in Expression
===============================|||

---- MODULE Test ----
op == <1>a
====

-------------------------------|||

(source_file (module (single_line) (identifier) (single_line)
  (unit (operator_definition
    (identifier) (def_eq) (proof_step_id)
  ))
(double_line)))

===============================|||
Prove 1 + 1 = 2
===============================|||

---- MODULE Test ----
THEOREM OnePlusOne == 1 + 1 = 2
OBVIOUS
====

-------------------------------|||

(source_file (module (single_line) (identifier) (single_line)
  (unit (theorem
    (identifier) (def_eq)
    (bound_infix_op (bound_infix_op (number) (plus) (number)) (eq) (number))
    (proof (terminal_proof))
  ))
(double_line)))

===============================|||
Prove Addition is Commutative
===============================|||

---- MODULE Test ----
THEOREM Commutative ==
  ASSUME
    NEW x \in Nat,
    NEW y \in Nat
    PROVE x + y = y + x
PROOF OMITTED
====

-------------------------------|||

(source_file (module (single_line) (identifier) (single_line)
  (unit (theorem
    (identifier) (def_eq)
    (assume_prove
      (new (identifier) (set_in) (primitive_value_set))
      (new (identifier) (set_in) (primitive_value_set))
      (bound_infix_op
        (bound_infix_op (identifier) (plus) (identifier))
        (eq)
        (bound_infix_op (identifier) (plus) (identifier))
      )
    )
    (proof (terminal_proof))
  ))
(double_line)))

===============================|||
Prove > is Transitive
===============================|||

---- MODULE Test ----
THEOREM Transitive ==
  ASSUME
    NEW X \in Nat,
    NEW Y \in Nat,
    NEW Z \in Nat,
    X > Y,
    Y > Z
    PROVE X > Z
PROOF BY DEF >
====

-------------------------------|||

(source_file (module (single_line) (identifier) (single_line)
  (unit (theorem
    (identifier) (def_eq)
    (assume_prove
      (new (identifier) (set_in) (primitive_value_set))
      (new (identifier) (set_in) (primitive_value_set))
      (new (identifier) (set_in) (primitive_value_set))
      (bound_infix_op (identifier) (gt) (identifier))
      (bound_infix_op (identifier) (gt) (identifier))
      (bound_infix_op (identifier) (gt) (identifier))
    )
    (proof (terminal_proof (use_body
      (use_body_def (infix_op_symbol (gt)))
    )))
  ))
(double_line)))

===============================|||
Prove 4 and 9 Have Square Roots
===============================|||

---- MODULE Test ----
HasSqrt(Y) == \E k \in 1..Y : k * k = Y

THEOREM TheseHaveSqrt ==
  ASSUME
    NEW X \in {4, 9}
  PROVE HasSqrt(X)
PROOF
  <1>1 HasSqrt(4) /\ HasSqrt(9) BY DEF HasSqrt
  <1>2 QED BY <1>1
====

-------------------------------|||

(source_file (module (single_line) (identifier) (single_line)
  (unit (operator_definition
    (identifier) (identifier) (def_eq)
    (bounded_quantification
      (exists)
      (quantifier_bound (identifier) (set_in) (bound_infix_op (number) (dots_2) (identifier)))
      (bound_infix_op (bound_infix_op (identifier) (mul) (identifier)) (eq) (identifier))
    )
  ))
  (unit (theorem
    (identifier) (def_eq)
    (assume_prove
      (new (identifier) (set_in) (finite_set_literal (number) (number)))
      (bound_op (identifier) (identifier))
    )
    (proof
      (non_terminal_proof
        (proof_step
          (begin_proof_step_token)
          (suffices_proof_step
            (bound_infix_op (bound_op (identifier) (number)) (land) (bound_op (identifier) (number)))
            (proof (terminal_proof (use_body (use_body_def (identifier)))))
          )
        )
        (qed_step
          (begin_proof_step_token)
          (proof (terminal_proof (use_body (use_body_expr (proof_step_id)))))
        )
      )
    )
  ))
(double_line)))
