===============================|||
Basic Assume/Prove
===============================|||

---- MODULE Test ----
THEOREM thm ==
  ASSUME P, Q
  PROVE C
OBVIOUS
====

-------------------------------|||

(source_file (module (header_line) (identifier) (header_line)
  (theorem
    (identifier) (def_eq)
    (assume_prove
      (identifier_ref)
      (identifier_ref)
      (identifier_ref)
    )
    (terminal_proof)
  )
(double_line)))

===============================|||
Nested Assume/Prove With Label
===============================|||

---- MODULE Test ----
THEOREM thm ==
  ASSUME asm :: 
    ASSUME P
    PROVE Q
  PROVE C
OMITTED
====

-------------------------------|||

(source_file (module (header_line) (identifier) (header_line)
  (theorem
    (identifier) (def_eq)
    (assume_prove
      (inner_assume_prove
        (identifier) (label_as)
        (assume_prove (identifier_ref) (identifier_ref))
      )
      (identifier_ref)
    )
    (terminal_proof)
  )
(double_line)))

===============================|||
Assume/Prove With New Constant
===============================|||

---- MODULE Test ----
THEOREM thm ==
  ASSUME NEW CONSTANT x \in S
  PROVE C
OBVIOUS
====

-------------------------------|||

(source_file (module (header_line) (identifier) (header_line)
  (theorem
    (identifier) (def_eq)
    (assume_prove
      (new (level) (identifier) (set_in) (identifier_ref))
      (identifier_ref)
    )
    (terminal_proof)
  )
(double_line)))

===============================|||
Assume/Prove With New Operator
===============================|||

---- MODULE Test ----
THEOREM thm ==
  ASSUME NEW TEMPORAL f(_, _)
  PROVE C
OMITTED
====

-------------------------------|||

(source_file (module (header_line) (identifier) (header_line)
  (theorem
    (identifier) (def_eq)
    (assume_prove
      (new (level) (operator_declaration
        (identifier) (placeholder) (placeholder)
      ))
      (identifier_ref)
    )
    (terminal_proof)
  )
(double_line)))

===============================|||
Assume/Prove in Suffices Step
===============================|||

---- MODULE Test ----
THEOREM TRUE
<1>a. SUFFICES
  ASSUME NEW CONSTANT x \in S
  PROVE TRUE
<1>b. QED
====

-------------------------------|||

(source_file (module (header_line) (identifier) (header_line)
  (theorem (boolean)
    (non_terminal_proof
      (proof_step (proof_step_id (level) (name))
        (suffices_proof_step (assume_prove
          (new (level) (identifier) (set_in) (identifier_ref))
          (boolean)
        ))
      )
      (qed_step (proof_step_id (level) (name)))
    )
  )
(double_line)))
